<?php
/**
 * Plugin Name: Claude AI Assistant
 * Plugin URI: https://votre-site.com
 * Description: Interface de chat avec Claude intégrée à WordPress avec support vocal et LangChain
 * Version: 1.0.0
 * Author: Auto-généré par Claude
 * Text Domain: claude-assistant
 */

// Sécurité: empêcher l'accès direct au fichier
if (!defined('ABSPATH')) {
    exit;
}

class Claude_Assistant {
    private $plugin_path;
    private $plugin_url;
    private $version = '1.0.0';
    private $anthropic_api_key = '';
    private $n8n_webhook_url = '';

    /**
     * Initialisation du plugin
     */
    public function __construct() {
        $this->plugin_path = plugin_dir_path(__FILE__);
        $this->plugin_url = plugin_dir_url(__FILE__);
        
        // Hooks d'initialisation
        add_action('admin_menu', array($this, 'add_admin_menu'));
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_enqueue_scripts', array($this, 'enqueue_admin_assets'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_frontend_assets'));
        
        // Créer un shortcode pour intégrer le chat sur n'importe quelle page
        add_shortcode('claude_chat', array($this, 'display_chat_interface'));
        
        // Ajouter l'endpoint REST API pour les communications avec n8n
        add_action('rest_api_init', array($this, 'register_rest_routes'));
        
        // Installer les assets lors de l'activation
        register_activation_hook(__FILE__, array($this, 'activate_plugin'));
    }
    
    /**
     * Activation du plugin: créer les dossiers nécessaires et tables en base de données
     */
    public function activate_plugin() {
        // Créer un répertoire pour stocker les fichiers audio temporaires
        $upload_dir = wp_upload_dir();
        $claude_dir = $upload_dir['basedir'] . '/claude-assistant';
        
        if (!file_exists($claude_dir)) {
            wp_mkdir_p($claude_dir);
        }
        
        // Créer la table pour stocker l'historique des conversations
        global $wpdb;
        $table_name = $wpdb->prefix . 'claude_conversations';
        
        $charset_collate = $wpdb->get_charset_collate();
        
        $sql = "CREATE TABLE $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            user_id mediumint(9) NOT NULL,
            conversation_id varchar(255) NOT NULL,
            message text NOT NULL,
            response text NOT NULL,
            message_type varchar(50) DEFAULT 'text',
            created_at datetime DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY  (id)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        dbDelta($sql);
        
        // Ajouter l'option pour le modèle Claude par défaut
        add_option('claude_model', 'claude-3-opus-20240229');
        add_option('claude_temperature', '0.7');
    }
    
    /**
     * Ajouter le menu d'administration
     */
    public function add_admin_menu() {
        add_menu_page(
            'Claude Assistant',
            'Claude Assistant',
            'manage_options',
            'claude-assistant',
            array($this, 'display_admin_page'),
            $this->plugin_url . 'assets/images/claude-icon.png',
            30
        );
        
        add_submenu_page(
            'claude-assistant',
            'Paramètres',
            'Paramètres',
            'manage_options',
            'claude-assistant-settings',
            array($this, 'display_settings_page')
        );
        
        add_submenu_page(
            'claude-assistant',
            'Historique',
            'Historique',
            'manage_options',
            'claude-assistant-history',
            array($this, 'display_history_page')
        );
        
        add_submenu_page(
            'claude-assistant',
            'Tableau de bord',
            'Tableau de bord',
            'manage_options',
            'claude-assistant-dashboard',
            array($this, 'display_dashboard_page')
        );
    }
    
    /**
     * Enregistrer les paramètres
     */
    public function register_settings() {
        register_setting('claude_assistant_settings', 'claude_api_key');
        register_setting('claude_assistant_settings', 'n8n_webhook_url');
        register_setting('claude_assistant_settings', 'claude_assistant_access_roles', array(
            'default' => array('administrator'),
            'sanitize_callback' => array($this, 'sanitize_roles')
        ));
        register_setting('claude_assistant_settings', 'claude_model');
        register_setting('claude_assistant_settings', 'claude_temperature');
        
        add_settings_section(
            'claude_assistant_main_section',
            'Configuration principale',
            array($this, 'settings_section_callback'),
            'claude-assistant-settings'
        );
        
        add_settings_field(
            'claude_api_key',
            'Clé API Anthropic',
            array($this, 'api_key_field_callback'),
            'claude-assistant-settings',
            'claude_assistant_main_section'
        );
        
        add_settings_field(
            'n8n_webhook_url',
            'URL Webhook n8n',
            array($this, 'webhook_url_field_callback'),
            'claude-assistant-settings',
            'claude_assistant_main_section'
        );
        
        add_settings_field(
            'claude_assistant_access_roles',
            'Rôles ayant accès',
            array($this, 'access_roles_field_callback'),
            'claude-assistant-settings',
            'claude_assistant_main_section'
        );
        
        add_settings_field(
            'claude_model',
            'Modèle Claude',
            array($this, 'model_field_callback'),
            'claude-assistant-settings',
            'claude_assistant_main_section'
        );
        
        add_settings_field(
            'claude_temperature',
            'Température',
            array($this, 'temperature_field_callback'),
            'claude-assistant-settings',
            'claude_assistant_main_section'
        );
    }
    
    /**
     * Sanitize roles
     */
    public function sanitize_roles($roles) {
        if (!is_array($roles)) {
            return array('administrator');
        }
        return $roles;
    }
    
    /**
     * Section de paramètres
     */
    public function settings_section_callback() {
        echo '<p>Configurez les paramètres pour connecter Claude Assistant à votre infrastructure.</p>';
    }
    
    /**
     * Champ de clé API
     */
    public function api_key_field_callback() {
        $value = get_option('claude_api_key', '');
        echo '<input type="password" id="claude_api_key" name="claude_api_key" value="' . esc_attr($value) . '" class="regular-text" />';
        echo '<p class="description">Votre clé API Anthropic pour Claude</p>';
    }
    
    /**
     * Champ d'URL de webhook
     */
    public function webhook_url_field_callback() {
        $value = get_option('n8n_webhook_url', '');
        echo '<input type="url" id="n8n_webhook_url" name="n8n_webhook_url" value="' . esc_attr($value) . '" class="regular-text" />';
        echo '<p class="description">URL de votre webhook n8n pour l\'intégration</p>';
    }
    
    /**
     * Champ des rôles d'accès
     */
    public function access_roles_field_callback() {
        $roles = get_editable_roles();
        $selected_roles = get_option('claude_assistant_access_roles', array('administrator'));
        
        foreach ($roles as $role_key => $role) {
            echo '<label>';
            echo '<input type="checkbox" name="claude_assistant_access_roles[]" value="' . esc_attr($role_key) . '" ' . 
                (in_array($role_key, $selected_roles) ? 'checked="checked"' : '') . ' />';
            echo esc_html($role['name']);
            echo '</label><br />';
        }
        echo '<p class="description">Sélectionnez les rôles qui peuvent accéder à Claude Assistant</p>';
    }
    
    /**
     * Champ de modèle Claude
     */
    public function model_field_callback() {
        $value = get_option('claude_model', 'claude-3-opus-20240229');
        echo '<select id="claude_model" name="claude_model">';
        echo '<option value="claude-3-opus-20240229" ' . selected($value, 'claude-3-opus-20240229', false) . '>Claude 3 Opus (Haute qualité)</option>';
        echo '<option value="claude-3-sonnet-20240229" ' . selected($value, 'claude-3-sonnet-20240229', false) . '>Claude 3 Sonnet (Équilibré)</option>';
        echo '<option value="claude-3-haiku-20240307" ' . selected($value, 'claude-3-haiku-20240307', false) . '>Claude 3 Haiku (Rapide)</option>';
        echo '</select>';
        echo '<p class="description">Sélectionnez le modèle Claude à utiliser pour les réponses</p>';
    }
    
    /**
     * Champ de température
     */
    public function temperature_field_callback() {
        $value = get_option('claude_temperature', '0.7');
        echo '<input type="range" id="claude_temperature" name="claude_temperature" min="0" max="1" step="0.1" value="' . esc_attr($value) . '" />';
        echo '<span id="temperature_value">' . esc_html($value) . '</span>';
        echo '<p class="description">Contrôle la créativité des réponses (0 = précis, 1 = créatif)</p>';
        echo '<script>
            jQuery(document).ready(function($) {
                $("#claude_temperature").on("input", function() {
                    $("#temperature_value").text($(this).val());
                });
            });
        </script>';
    }
    
    /**
     * Page d'administration principale
     */
    public function display_admin_page() {
        // Vérifier si l'utilisateur a accès
        if (!$this->user_has_access()) {
            wp_die(__('Vous n\'avez pas les permissions suffisantes pour accéder à cette page.', 'claude-assistant'));
        }
        
        include_once($this->plugin_path . 'templates/admin-page.php');
    }
    
    /**
     * Page de paramètres
     */
    public function display_settings_page() {
        // Vérifier si l'utilisateur a accès
        if (!$this->user_has_access()) {
            wp_die(__('Vous n\'avez pas les permissions suffisantes pour accéder à cette page.', 'claude-assistant'));
        }
        
        include_once($this->plugin_path . 'templates/settings-page.php');
    }
    
    /**
     * Page d'historique
     */
    public function display_history_page() {
        // Vérifier si l'utilisateur a accès
        if (!$this->user_has_access()) {
            wp_die(__('Vous n\'avez pas les permissions suffisantes pour accéder à cette page.', 'claude-assistant'));
        }
        
        global $wpdb;
        $table_name = $wpdb->prefix . 'claude_conversations';
        $user_id = get_current_user_id();
        
        // Récupérer les conversations par ID de conversation
        $conversations = $wpdb->get_results(
            $wpdb->prepare(
                "SELECT DISTINCT conversation_id, MAX(created_at) as last_message
                FROM $table_name
                WHERE user_id = %d
                GROUP BY conversation_id
                ORDER BY last_message DESC",
                $user_id
            )
        );
        
        echo '<div class="wrap">';
        echo '<h1>Historique des conversations</h1>';
        
        if (empty($conversations)) {
            echo '<p>Aucune conversation trouvée.</p>';
        } else {
            echo '<table class="wp-list-table widefat fixed striped">';
            echo '<thead><tr><th>ID de conversation</th><th>Dernier message</th><th>Actions</th></tr></thead>';
            echo '<tbody>';
            
            foreach ($conversations as $conversation) {
                $view_url = add_query_arg(array(
                    'page' => 'claude-assistant-history',
                    'conversation' => $conversation->conversation_id
                ), admin_url('admin.php'));
                
                echo '<tr>';
                echo '<td>' . esc_html($conversation->conversation_id) . '</td>';
                echo '<td>' . esc_html($conversation->last_message) . '</td>';
                echo '<td><a href="' . esc_url($view_url) . '">Voir</a></td>';
                echo '</tr>';
            }
            
            echo '</tbody>';
            echo '</table>';
        }
        
        // Afficher une conversation spécifique si demandée
        if (isset($_GET['conversation'])) {
            $conversation_id = sanitize_text_field($_GET['conversation']);
            
            $messages = $wpdb->get_results(
                $wpdb->prepare(
                    "SELECT * FROM $table_name
                    WHERE user_id = %d AND conversation_id = %s
                    ORDER BY created_at ASC",
                    $user_id,
                    $conversation_id
                )
            );
            
            echo '<h2>Conversation: ' . esc_html($conversation_id) . '</h2>';
            echo '<div class="claude-conversation-history">';
            
            foreach ($messages as $message) {
                echo '<div class="message-container">';
                echo '<div class="user-message">';
                echo '<strong>Vous:</strong><br>';
                echo esc_html($message->message);
                echo '<span class="message-time">' . esc_html($message->created_at) . '</span>';
                echo '</div>';
                echo '<div class="claude-message">';
                echo '<strong>Claude:</strong><br>';
                echo esc_html($message->response);
                echo '</div>';
                echo '</div>';
            }
            
            echo '</div>';
        }
        
        echo '</div>';
    }
    
    /**
     * Page de tableau de bord
     */
    public function display_dashboard_page() {
        // Vérifier si l'utilisateur a accès
        if (!$this->user_has_access()) {
            wp_die(__('Vous n\'avez pas les permissions suffisantes pour accéder à cette page.', 'claude-assistant'));
        }
        
        echo '<div class="wrap">';
        echo '<h1>Tableau de bord Claude Assistant</h1>';
        
        // Stats d'utilisation
        global $wpdb;
        $table_name = $wpdb->prefix . 'claude_conversations';
        
        $total_messages = $wpdb->get_var("SELECT COUNT(*) FROM $table_name");
        $total_conversations = $wpdb->get_var("SELECT COUNT(DISTINCT conversation_id) FROM $table_name");
        $audio_messages = $wpdb->get_var("SELECT COUNT(*) FROM $table_name WHERE message_type = 'audio'");
        
        echo '<div class="claude-stats-container">';
        echo '<div class="claude-stat-box">';
        echo '<h3>Total des messages</h3>';
        echo '<div class="stat-value">' . esc_html($total_messages) . '</div>';
        echo '</div>';
        
        echo '<div class="claude-stat-box">';
        echo '<h3>Conversations</h3>';
        echo '<div class="stat-value">' . esc_html($total_conversations) . '</div>';
        echo '</div>';
        
        echo '<div class="claude-stat-box">';
        echo '<h3>Messages audio</h3>';
        echo '<div class="stat-value">' . esc_html($audio_messages) . '</div>';
        echo '</div>';
        echo '</div>';
        
        // Graphiques (à intégrer avec Chart.js)
        echo '<div class="claude-chart-container">';
        echo '<div class="claude-chart" id="messages-chart">';
        echo '<h3>Messages par jour</h3>';
        echo '<canvas id="messagesPerDay"></canvas>';
        echo '</div>';
        echo '</div>';
        
        echo